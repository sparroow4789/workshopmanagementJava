/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dialog;

import db.Database;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import workshoppackage.OpenedJobCard;

/**
 *
 * @author Oshan Premachandra
 */
public class AddItemThisLabourJobDialog extends javax.swing.JDialog {

    private int jobid;
    private String labourid;
    
    DateFormat pfm = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    
    /**
     * Creates new form AddItemThisLabourJobDialog
     */
    public AddItemThisLabourJobDialog(java.awt.Frame parent, boolean modal, String labourid, int jobId) {
        super(parent, modal);
        this.jobid = jobId;
        this.labourid = labourid;
        initComponents();
        
        AutoCompleteDecorator.decorate(SelectPart);
        
        LoadPartsData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        InvoiceType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        PartQty = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        PartRemark = new javax.swing.JTextField();
        AddBtn = new javax.swing.JButton();
        AvailableStockLbl = new javax.swing.JLabel();
        SelectPart = new javax.swing.JComboBox<>();
        SelectedPriceBatch = new javax.swing.JLabel();
        InvoiceTypeNormalRadio = new javax.swing.JRadioButton();
        InvoiceTypeMemoRadio = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PartTbl = new javax.swing.JTable();
        DeleteBtn = new javax.swing.JButton();
        SubletIdLbl = new javax.swing.JLabel();
        AddToJobBtn = new javax.swing.JButton();
        ClearBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 700));

        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 700));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Parts to Labour");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(84, 84, 84))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel2.setText("Select Part");

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel3.setText("Quantity");

        PartQty.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        PartQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        PartQty.setText("1");
        PartQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PartQtyKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel4.setText("Invoice Type");

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel5.setText("Remark");

        PartRemark.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        AddBtn.setBackground(new java.awt.Color(255, 255, 255));
        AddBtn.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        AddBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/add.png"))); // NOI18N
        AddBtn.setText("Add");
        AddBtn.setPreferredSize(new java.awt.Dimension(117, 33));
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        AvailableStockLbl.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        AvailableStockLbl.setForeground(new java.awt.Color(204, 0, 0));
        AvailableStockLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AvailableStockLbl.setText("Available Stock : 0 in stock");

        SelectPart.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        SelectPart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SelectPart.setMinimumSize(new java.awt.Dimension(13, 23));
        SelectPart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectPartActionPerformed(evt);
            }
        });

        InvoiceTypeNormalRadio.setBackground(new java.awt.Color(255, 255, 255));
        InvoiceType.add(InvoiceTypeNormalRadio);
        InvoiceTypeNormalRadio.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        InvoiceTypeNormalRadio.setSelected(true);
        InvoiceTypeNormalRadio.setText("Normal");
        InvoiceTypeNormalRadio.setActionCommand("1");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, InvoiceTypeNormalRadio, org.jdesktop.beansbinding.ELProperty.create("${actionCommand}"), InvoiceTypeNormalRadio, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        InvoiceTypeMemoRadio.setBackground(new java.awt.Color(255, 255, 255));
        InvoiceType.add(InvoiceTypeMemoRadio);
        InvoiceTypeMemoRadio.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        InvoiceTypeMemoRadio.setText("Memo");
        InvoiceTypeMemoRadio.setActionCommand("2");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, InvoiceTypeMemoRadio, org.jdesktop.beansbinding.ELProperty.create("${actionCommand}"), InvoiceTypeMemoRadio, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(AvailableStockLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SelectPart, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PartQty, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(InvoiceTypeNormalRadio, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                .addGap(133, 133, 133))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(InvoiceTypeMemoRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PartRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(SelectedPriceBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PartRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InvoiceTypeMemoRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(PartQty, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SelectPart, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(InvoiceTypeNormalRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AvailableStockLbl)
                        .addComponent(SelectedPriceBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        PartTbl.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        PartTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Part Name", "Quantity", "Selling Price", "Remark", "item_id", "pricebatch_id", "labour_id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PartTbl.setRowHeight(25);
        PartTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PartTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PartTbl);
        if (PartTbl.getColumnModel().getColumnCount() > 0) {
            PartTbl.getColumnModel().getColumn(0).setMinWidth(50);
            PartTbl.getColumnModel().getColumn(0).setPreferredWidth(50);
            PartTbl.getColumnModel().getColumn(0).setMaxWidth(50);
            PartTbl.getColumnModel().getColumn(2).setMinWidth(100);
            PartTbl.getColumnModel().getColumn(2).setPreferredWidth(100);
            PartTbl.getColumnModel().getColumn(2).setMaxWidth(100);
            PartTbl.getColumnModel().getColumn(3).setMinWidth(120);
            PartTbl.getColumnModel().getColumn(3).setPreferredWidth(120);
            PartTbl.getColumnModel().getColumn(3).setMaxWidth(120);
            PartTbl.getColumnModel().getColumn(5).setMinWidth(0);
            PartTbl.getColumnModel().getColumn(5).setPreferredWidth(0);
            PartTbl.getColumnModel().getColumn(5).setMaxWidth(0);
            PartTbl.getColumnModel().getColumn(6).setMinWidth(0);
            PartTbl.getColumnModel().getColumn(6).setPreferredWidth(0);
            PartTbl.getColumnModel().getColumn(6).setMaxWidth(0);
            PartTbl.getColumnModel().getColumn(7).setMinWidth(0);
            PartTbl.getColumnModel().getColumn(7).setPreferredWidth(0);
            PartTbl.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        DeleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        DeleteBtn.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        DeleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/delete.png"))); // NOI18N
        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        AddToJobBtn.setBackground(new java.awt.Color(255, 255, 255));
        AddToJobBtn.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        AddToJobBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/add.png"))); // NOI18N
        AddToJobBtn.setText("Add to Job");
        AddToJobBtn.setPreferredSize(new java.awt.Dimension(117, 33));
        AddToJobBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToJobBtnActionPerformed(evt);
            }
        });

        ClearBtn.setBackground(new java.awt.Color(255, 255, 255));
        ClearBtn.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        ClearBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/clear.png"))); // NOI18N
        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(SubletIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddToJobBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DeleteBtn)
                        .addComponent(AddToJobBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ClearBtn))
                    .addComponent(SubletIdLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(106, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void LoadPartsData(){
        ResultSet cd = Database.getData("SELECT * FROM tbl_item");
        SelectPart.removeAllItems();
        SelectPart.addItem("Select Part");
        try {
            while(cd.next()){
                
                Vector v = new Vector();
                v.add(cd.getString(4));
                
                SelectPart.addItem(cd.getString(4));
                 
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed

        
        
        if(SelectPart.getSelectedItem().toString().isEmpty() || PartQty.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please fill the all area.");
        }else{
//            JOptionPane.showMessageDialog(this, InvoiceType.getSelection().getActionCommand());
            
            //Get All Data
            String PartCode = SelectPart.getSelectedItem().toString();
            Double TypeQty = Double.parseDouble(PartQty.getText());
            Double InvoiceTypeItem = Double.parseDouble(InvoiceType.getSelection().getActionCommand());
            String Remark = PartRemark.getText();
            String PriceBatch = SelectedPriceBatch.getText();
            
            
            //Get Item ID
            ResultSet NQty = Database.getData("SELECT * FROM tbl_item WHERE part_number = '"+PartCode+"' ");
            try {
                if(NQty.first()){

                    String ItemId = NQty.getString("item_id");
                    String ItemName = NQty.getString("part_name");
                    
                    //Check This Price batch Or Normal (Normal = 0)
                    if(Integer.parseInt(PriceBatch) == 0){
//                        JOptionPane.showMessageDialog(this, "good");

                        ResultSet CAAI = Database.getData("SELECT COUNT(*) FROM tbl_job_item WHERE labour_id = '"+labourid+"' AND item_id = '"+ItemId+"' ");
                        if(CAAI.first()){
                            int AlreadyInCount = CAAI.getInt(1);
                            
                            if(AlreadyInCount == 0){
                                //Check Quantity
                                ResultSet CQty = Database.getData("SELECT * FROM tbl_item WHERE item_id = "+ItemId+" ");
                                if(CQty.first()){
                                    String Quantity = CQty.getString("quantity");
                                    String NormalSellingPrice = CQty.getString("selling_cost");

                                    //Check Quantity
                                    Double SellingPrice = 0.0;
                                    int PartCount=0;
                                    if(Double.parseDouble(Quantity) >= TypeQty){

                                        //Part Selling Price
                                        //Check This Normal Or Memo
                                        if(InvoiceTypeItem == 1){

                                            ResultSet CPBSP = Database.getData("SELECT COUNT(*) FROM tbl_item_price_batch WHERE item_id = '"+ItemId+"' ");
                                            try {
                                                if(CPBSP.first()){
                                                    int PriceBatchCount = CPBSP.getInt(1);

                                                    if(PriceBatchCount == 0){

                                                        SellingPrice = Double.parseDouble(NormalSellingPrice);

                                                    }else{

                                                        ResultSet SPPB = Database.getData("SELECT * FROM tbl_item_price_batch WHERE item_id = '"+ItemId+"' ORDER BY price_batch_id DESC LIMIT 1 ");
                                                        try {
                                                            if(SPPB.first()){
                                                                SellingPrice = Double.parseDouble(SPPB.getString(5));
                                                            }
                                                        }catch (SQLException ey){
                                                            ey.printStackTrace();
                                                        }

                                                    }

                                                }
                                            }catch (SQLException et){
                                                et.printStackTrace();
                                            }
                                        //Memo Selling Price
                                        }else{
                                            ResultSet MemoSP = Database.getData("SELECT * FROM tbl_item tit INNER JOIN tbl_item_cost tic ON tit.item_id=tic.item_id WHERE tit.item_id = "+ItemId+" ");
                                            if(MemoSP.first()){
                                                SellingPrice = Double.parseDouble(MemoSP.getString(14));

                                            }


                                        }

        //                                JOptionPane.showMessageDialog(this, "Selling Price1 3 "+SellingPrice);

                                        int itemCount = PartCount+1;
                                        String data[] = {Integer.toString(itemCount), ItemName, Double.toString(TypeQty), Double.toString(SellingPrice), Remark, ItemId, PriceBatch, labourid };
                                        DefaultTableModel PartModel = (DefaultTableModel)PartTbl.getModel();
                                        PartModel.addRow(data);

                                            PartQty.setText("1");
                                            PartRemark.setText("");


                                    }else{
                                        JOptionPane.showMessageDialog(this, "Please add the stock first.");
                                    }




                                }
                            }else{
                                JOptionPane.showMessageDialog(this, "Already exists.");
                            }
                            
                        }
                          
                        
                          

                    //Price Batch Value Send
                    }else{
                        
                        
                        ResultSet CAAI = Database.getData("SELECT COUNT(*) FROM tbl_job_item WHERE labour_id = '"+labourid+"' AND stat = '"+PriceBatch+"' ");
                        if(CAAI.first()){
                            int AlreadyInCount = CAAI.getInt(1);
                            
                            if(AlreadyInCount == 0){
                                //Check Quantity
                                ResultSet CQty = Database.getData("SELECT * FROM tbl_item_price_batch WHERE item_id = '"+ItemId+"' AND price_batch_id = "+PriceBatch+" ");
                                if(CQty.first()){
                                    String Quantity = CQty.getString("qty");
                                    String PBSellingPrice = CQty.getString("selling_price");

                                    //Check Quantity
                                    Double SellingPrice = 0.0;
                                    int PartCount=0;
                                    if(Double.parseDouble(Quantity) >= TypeQty){

                                        //Part Selling Price
                                        //Check This Normal Or Memo
                                        if(InvoiceTypeItem == 1){

                                            SellingPrice = Double.parseDouble(PBSellingPrice);

                                        //Memo Selling Price
                                        }else{
                                            ResultSet MemoSP = Database.getData("SELECT * FROM tbl_item_price_batch WHERE item_id = '"+ItemId+"' ORDER BY price_batch_id DESC LIMIT 1 ");
                                            if(MemoSP.first()){
                                                SellingPrice = Double.parseDouble(MemoSP.getString("cost_price"));

                                            }


                                        }

        //                                JOptionPane.showMessageDialog(this, "Selling Price1 3 "+SellingPrice);

                                        int itemCount = PartCount+1;
                                        String data[] = {Integer.toString(itemCount), ItemName, Double.toString(TypeQty), Double.toString(SellingPrice), Remark, ItemId, PriceBatch, labourid };
                                        DefaultTableModel PartModel = (DefaultTableModel)PartTbl.getModel();
                                        PartModel.addRow(data);

                                            PartQty.setText("1");
                                            PartRemark.setText("");


                                    }else{
                                        
//                                        JOptionPane.showMessageDialog(this, "Please add the stock first.");
                                        
                                        //****New Added Feature****
                                        //Check The Quantity Availibility Another Price Batch 
                                        ResultSet CheckQtyPB = Database.getData("SELECT * FROM tbl_item_price_batch WHERE item_id = '"+ItemId+"' AND qty >= "+TypeQty+" ORDER BY price_batch_id ASC LIMIT 1");
                                        if(CheckQtyPB.first()){
                                                String NewPriceBatch = CheckQtyPB.getString("price_batch_id");
                                                
                                                
                                                //Check This Normal Or Memo
                                                if(InvoiceTypeItem == 1){

                                                    SellingPrice = Double.parseDouble(PBSellingPrice);

                                                //Memo Selling Price
                                                }else{
                                                    ResultSet MemoSP = Database.getData("SELECT * FROM tbl_item_price_batch WHERE item_id = '"+ItemId+"' ORDER BY price_batch_id DESC LIMIT 1 ");
                                                    if(MemoSP.first()){
                                                        SellingPrice = Double.parseDouble(MemoSP.getString("cost_price"));

                                                    }


                                                }

                                                int itemCount = PartCount+1;
                                                String data[] = {Integer.toString(itemCount), ItemName, Double.toString(TypeQty), Double.toString(SellingPrice), Remark, ItemId, NewPriceBatch, labourid };
                                                DefaultTableModel PartModel = (DefaultTableModel)PartTbl.getModel();
                                                PartModel.addRow(data);

                                                    PartQty.setText("1");
                                                    PartRemark.setText("");
                                                
                                                

                                        }else{
                                            
                                            JOptionPane.showMessageDialog(this, "Please add the stock first.");
                                            
                                        }
                                        
                                         
                                        
                                    }




                                }
                            }else{
                                JOptionPane.showMessageDialog(this, "Already exists.");
                            }
                            
                        }
                        
                        
                        
                        
                        
                    }
                    
                    
                }
            }catch (SQLException ec) {
                ec.printStackTrace();
            }


        }

    }//GEN-LAST:event_AddBtnActionPerformed

    
    private void PartTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PartTblMouseClicked

    }//GEN-LAST:event_PartTblMouseClicked

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed

        DefaultTableModel ipdm = (DefaultTableModel)PartTbl.getModel();
        
        
        if(PartTbl.getSelectedRowCount()==1){
            ipdm.removeRow(PartTbl.getSelectedRow());
            
        }else{
            if(PartTbl.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "Part table is Empty!");
            }else{
                JOptionPane.showMessageDialog(this, "Please select single row for delete.");
            }
        }

    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void AddToJobBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToJobBtnActionPerformed
        
        for(int i = 0;i< PartTbl.getRowCount();i++){

            String AddedPartname = PartTbl.getValueAt(i, 1).toString();
            String AddedQuantity = PartTbl.getValueAt(i, 2).toString();
            String AddedSellingPrice = PartTbl.getValueAt(i, 3).toString();
            String AddedRemark = PartTbl.getValueAt(i, 4).toString();
            String AddedItemId = PartTbl.getValueAt(i, 5).toString();
            String AddedPriceBatchId = PartTbl.getValueAt(i, 6).toString();
            String AddedLabourId = PartTbl.getValueAt(i, 7).toString();
            
            if(Integer.parseInt(AddedPriceBatchId) == 0){
                
                if(Database.saveData("INSERT INTO tbl_job_item VALUES (default, '"+jobid+"' , '"+cache.LogUserId+"' , '"+AddedLabourId+"' , '"+AddedItemId+"' , '"+AddedQuantity+"' , '"+AddedRemark+"' , '0' , '"+AddedPriceBatchId+"' , '"+AddedSellingPrice+"' , '"+pfm.format(new Date())+"' )")){
                    System.out.println("Successfully added.");
//                    JOptionPane.showMessageDialog(this, "Successfully added.");
                    
                    if(Database.saveData("UPDATE tbl_item SET quantity = quantity - '"+AddedQuantity+"' WHERE item_id = '"+AddedItemId+"' ")){
                        System.out.println("Successfully removed.");
                        

                    }else{
                        JOptionPane.showMessageDialog(this, "Error, Item Removing Error");
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(this, "Error, Item Adding Error");
                }
                
            }else{
                
                if(Database.saveData("INSERT INTO tbl_job_item VALUES (default, '"+jobid+"' , '"+cache.LogUserId+"' , '"+AddedLabourId+"' , '"+AddedItemId+"' , '"+AddedQuantity+"' , '"+AddedRemark+"' , '0' , '"+AddedPriceBatchId+"' , '"+AddedSellingPrice+"' , '"+pfm.format(new Date())+"' )")){
                    System.out.println("Successfully added.");
//                    JOptionPane.showMessageDialog(this, "Successfully added.");
                    
                    if(Database.saveData("UPDATE tbl_item_price_batch SET qty = qty - '"+AddedQuantity+"' WHERE item_id= '"+AddedItemId+"' AND price_batch_id = "+AddedPriceBatchId+" ")){
                        System.out.println("Successfully removed.");
                        

                    }else{
                        JOptionPane.showMessageDialog(this, "Error, Item Removing Error");
                    }

                }else{
                    JOptionPane.showMessageDialog(this, "Error, Item Adding Error");
                } 
                
            }
            
            
        }
        JOptionPane.showMessageDialog(this, "Successfully added.");
        OpenedJobCard.LoadJobItemData();
        this.dispose();
        
    }//GEN-LAST:event_AddToJobBtnActionPerformed

    private void SelectPartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectPartActionPerformed
        if(SelectPart.getSelectedItem() != null){
            double pbquantity = 0;
            ResultSet NQty = Database.getData("SELECT * FROM tbl_item WHERE part_number = '"+SelectPart.getSelectedItem().toString()+"' ");
            try {
                if(NQty.first()){

                    String itemid = NQty.getString("item_id");
                    String nquantity = NQty.getString("quantity");
                    
                    if(Double.parseDouble(nquantity) > 0){
                        SelectedPriceBatch.setText("0");
                    }
                    

                    
                    ResultSet PBQty = Database.getData("SELECT * FROM tbl_item_price_batch WHERE item_id = '"+itemid+"' ORDER BY price_batch_id DESC ");
                    try {
                        while(PBQty.next()){

                            int pbid = PBQty.getInt("price_batch_id");
                            String pbquantity1 = PBQty.getString("qty");
                            
                            pbquantity += Double.parseDouble(pbquantity1);
                            
                            if(Double.parseDouble(pbquantity1) > 0){
                                SelectedPriceBatch.setText(pbid+"");
                            }

                        }
                    } catch (SQLException ex) {
                       ex.printStackTrace();
                    }
                    
                    
                    double availablestock =  pbquantity + Double.parseDouble(nquantity);
                    
                    AvailableStockLbl.setText("Available Stock : "+availablestock+" in stock");

                }
            } catch (SQLException ex) {
               ex.printStackTrace();
            }
         
        }
    }//GEN-LAST:event_SelectPartActionPerformed

    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        DefaultTableModel dm = (DefaultTableModel)PartTbl.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged(); // notifies the JTable that the model has changed
    }//GEN-LAST:event_ClearBtnActionPerformed

    private void PartQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PartQtyKeyTyped
       
    }//GEN-LAST:event_PartQtyKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddItemThisLabourJobDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddItemThisLabourJobDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddItemThisLabourJobDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddItemThisLabourJobDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddItemThisLabourJobDialog dialog = new AddItemThisLabourJobDialog(new javax.swing.JFrame(), true, "", 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AddToJobBtn;
    private javax.swing.JLabel AvailableStockLbl;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.ButtonGroup InvoiceType;
    private javax.swing.JRadioButton InvoiceTypeMemoRadio;
    private javax.swing.JRadioButton InvoiceTypeNormalRadio;
    private javax.swing.JTextField PartQty;
    private javax.swing.JTextField PartRemark;
    private javax.swing.JTable PartTbl;
    private javax.swing.JComboBox<String> SelectPart;
    private javax.swing.JLabel SelectedPriceBatch;
    private javax.swing.JLabel SubletIdLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
